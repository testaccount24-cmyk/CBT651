Subject:     Re: BWO Update in Batch
From:        cgrantha@notes.state.ne.us   (Chip Grantham)
Date:        Fri, 24 Oct 2003 12:04:36 -0500
To:          Sam Golob <sbgolob@cbttape.org>

Sam,

Here is some text about the BWO flags, who cares, and what the
program does:

DFSMSdss supports backup-while-open serialization, which can perform
backup of data sets that are open for update for long periods of
time.  It can also perform a logical data set dump of these data
sets even if another application has them serialized.
Backup-while-open is a better method than using SHARE or
TOLERATE(ENQFAILURE) for dumping CICS VSAM file-control data sets
that are in-use and open for update. When you dump data sets that
are designated by CICS as eligible for backup-while-open processing,
data integrity is maintained through serialization interactions
between CICS (data base control program), CICSVR (forward-recovery
program), VSAM record management, DFSMSdfp, and DFSMSdss.

Keywords from the IDCAMS Define, Current Catalog time and date
stamps, and Backup-While-Open flags may need to be reviewed when
performing a recovery or backup.

The program GDERLSBT will report on current status of these
indicators from all sources.  The input may be a specific dataset
or may be a catalog filter.

The input control statement
  SHOW=<dsname>
will report on RLS indicators for the requested dsname. The input
control statement
  LEVEL=<catalog filter>
will search the master catalog and usercatalogs using IGGCSI00
for VSAM clusters reporting on every dataset which meet the
filter qualifications.

The program GDEBWOBT will facilitate the setting of the BWO control
flags.  The setting of the flags may be required to accommodate
backup-while-open processing, build testing scenarios, or allow
processing by CICSVR and/or CICS.

* ------------------------------------------------------------------- *
*                                                                     *
* RESET BWO FLAGS IN BATCH                                            *
*                                                                     *
* CONTROL CARDS                                                       *
*   SHOW=<DSNAME>      ASK THE STATUS OF THE BWO FLAGS AND SHOW       *
*                      VALUES IN THE OUTPUT REPORT                    *
*                     -THE CURRENT PROCESSING DSN IS SET TO <DSNAME>  *
*   DSN=<DSNAME>       SET THE PROCESSING DSN TO <DSNAME>             *
*                     -THE COMMANDS TEST AND SET USE THE LAST         *
*                      ESTABLISHED DSNAME AND BWO FLAGS FOR PROCESSING*
*   BWO=<BWO>          SET THE PROCESSING BWO FLAGS TO <BWO>          *
*                     -THE COMMANDS TEST AND SET USE THE LAST         *
*                      ESTABLISHED DSNAME AND BWO FLAGS FOR PROCESSING*
*   TEST=<BWO>         COMPARE THE STATUS OF THE BWO FLAGS TO THE     *
*                      THREE FLAGS HERE                               *
*                        IF EQUAL PROCESSING CONTINUES WITH NEXT      *
*                          CONTROL CARD                               *
*                        IF NOT EQUAL PROCESSING OF CONTROL CARDS     *
*                          IS SKIPPED UNTIL NEXT RESET                *
*   SET=<BWO>          SET THE CURRENT PROCESSING DSNAME TO THE       *
*                      VALUES ENTERED                                 *
*   RESET              RESETS THE SKIP PROCESSING OPTION FROM A FAILED*
*                      TEST COMMAND...PROCESSING DSNAME IS ALSO       *
*                      INITIALIZED                                    *
*                                                                     *
* DDNAMES                                                             *
*   GDEBWOA            INPUT CONTROL CARDS                            *
*   GDEBWO01           STATUS REPORT OF CONTROL CARDS <OPTIONAL>      *
*   GDEBWO02           TRACE OF CALL TO ROUTINES      <OPTIONAL>      *
*                                                                     *
* SUGGESTED COMMAND SEQUENCE (EXAMPLE 1 .. SIMPLE SET)                *
*   //GDEBWOA  DD  *                                                  *
*   SHOW=MY.BWO.DATASET                                               *
*   SET=000                                                           *
*                                                                     *
* SHOW WILL REPORT CURRENT STATUS AND SET WILL CHANGE THE STATUS      *
*   .........................(EXAMPLE 2 .. SET ONLY IF IN ERROR)      *
*   //GDEBWOA  DD  *                                                  *
*   SHOW=MY.BWO.DATASET                                               *
*   TEST=100                                                          *
*   SET=000                                                           *
* SHOW WILL REPORT CURRENT STATUS                                     *
* TEST WILL MAKE SURE THE SET NEEDS TO BE DONE                        *
* SET WILL SET THE STATUS ONLY IF THE TEST IS SUCCESSFUL              *
*   .........................(EXAMPLE 2 .. SET ONLY IF IN ERROR)      *
*   //GDEBWOA  DD  *                                                  *
*   SHOW=MY.BWO.DATASET1                                              *
*   TEST=100                                                          *
*   SET=000                                                           *
*   RESET                                                             *
*   SHOW=MY.BWO.DATASET2                                              *
*   TEST=100                                                          *
*   SET=000                                                           *
* SHOW WILL REPORT CURRENT STATUS                                     *
* TEST WILL MAKE SURE THE SET NEEDS TO BE DONE                        *
* SET WILL SET THE STATUS ONLY IF THE TEST IS SUCCESSFUL              *
* RESET WILL ALLOW THE SECOND SET OF CONTROL CARDS TO BE PROCESSED    *
* SHOW WILL REPORT CURRENT STATUS                                     *
* TEST WILL MAKE SURE THE SET NEEDS TO BE DONE                        *
* SET WILL SET THE STATUS ONLY IF THE TEST IS SUCCESSFUL              *
* ------------------------------------------------------------------- *




Thoughts for a member in the source PDS.

BWO and RLS from DFSMS  Introduction:

DFSMSdss supports backup-while-open serialization, which can
perform backup of data sets that are open for update for long
periods of time.  It can also perform a logical data set dump of
these data sets even if another application has them serialized.
Backup-while-open is a better method than using SHARE or
TOLERATE(ENQFAILURE) for dumping Customer Information Control
System (CICS) VSAM file-control data sets that are in-use and
open for update. When you dump data sets that are designated by
CICS as eligible for backup-while-open processing, data integrity
is maintained through serialization interactions between CICS
(data base control program), CICSVR (forward-recovery program),
VSAM record management, DFSMSdfp, and DFSMSdss.

CICS maintains recovery data in the form of a date and time-stamp
in the catalog entry for backup-while-open data sets. This
information is not used or processed by DFSMSdss, but it is
dumped and restored to preserve that information for CICSVR. The
recovery data is also printed in selected messages to assist you
in your recovery efforts.

VSAM record-level sharing (RLS) extends the DFSMS storage
hierarchy to support a data sharing environment across multiple
systems in a Parallel Sysplex.  This support is designed
primarily for VSAM data sets used by CICS Online Transaction
Processing (OLTP) applications. VSAM RLS processing involves
support from multiple products: CICS Transaction Server, CICSVR
2.3, and DFSMS/MVS 1.3 or higher.

VSAM RLS is a data set access mode that allows multiple address
spaces, CICS application owning regions (AORs) on multiple z/OS
systems, and jobs to access data at the same time. With VSAM RLS,
multiple CICS systems can directly access a shared VSAM data set,
eliminating the need for function shipping between AORs and file
owning regions (FORs).

CICS provides the logging, commit, and rollback functions for
VSAM recoverable files; VSAM provides record-level serialization
and cross-system caching; and CICSVR provides a data set recovery
function. Whether a data set is recoverable or not determines the
level of sharing that is allowed between applications. For
example:

-   Both CICS and non-CICS jobs can have concurrent read/write
access to nonrecoverable data sets.

-   Non-CICS jobs can have read-only access to recoverable data
sets, concurrent with read/write access by CICS jobs.

You use the LOG data set attribute to define a data set as
recoverable or nonrecoverable.

Restriction: Batch jobs that update recoverable data sets
continue to use non-RLS mode (non-shared resource (NSR), local
shared resource (LSR), global shared resource (GSR) access
modes.) They cannot concurrently update any data set being
accessed in RLS access mode.

VSAM RLS uses the coupling facility (CF) to perform data set
level locking, record locking, and data caching. VSAM RLS uses
the conditional write and cross-invalidate functions of the CF
cache structure, thereby avoiding the need for control interval
(CI) level locking.

VSAM RLS uses the CF caches as store-through caches. When a
control interval of data is written, it is written to both the CF
cache and to DASD.  This ensures that problems occurring with a
CF cache do not result in the loss of VSAM data.

Hope this helps,
Chip


